package kz.infologia.bot.bot;

import kz.infologia.bot.command.*;
import kz.infologia.bot.config.BotConfig;
import kz.infologia.bot.model.User;
import kz.infologia.bot.service.UserService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

@Slf4j
@Component
@RequiredArgsConstructor
public class InfologiaBot extends TelegramLongPollingBot {

    private final BotConfig botConfig;
    private final UserService userService;
    private final AboutCommand aboutCommand;
    private final QuoteCommand quoteCommand;

    @Override
    public String getBotUsername() {
        return botConfig.getUsername();
    }

    @Override
    public String getBotToken() {
        return botConfig.getToken();
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
            long chatId = update.getMessage().getChatId();
            String firstName = update.getMessage().getFrom().getFirstName();

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            User user = userService.saveOrUpdateUser(update.getMessage().getFrom());

            log.info("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {} (ID: {}): {}", firstName, user.getTelegramId(), messageText);

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            if (messageText.startsWith("/")) {
                handleCommand(chatId, messageText, update);
            } else {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                sendMessage(chatId, "–ü—Ä–∏–≤–µ—Ç! üëã\n\n" +
                        "–Ø –ø–æ–ª—É—á–∏–ª —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: \"" + messageText + "\"\n\n" +
                        "–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥!\n" +
                        "–£–¥–∞—á–∏ –≤ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –ï–ù–¢! üéì");
            }
        }
    }

    private void handleCommand(long chatId, String messageText, Update update) {
        String command = messageText.split(" ")[0].toLowerCase();
        
        switch (command) {
            case "/start":
                sendMessage(chatId, "startFIXME", true);
                break;
                
            case "/help":
                sendMessage(chatId, "helpFIXME", true);
                break;
                
            case "/about":
                aboutCommand.execute(this, update);
                break;
                
            case "/quote":
                quoteCommand.execute(this, update);
                break;
                
            case "/info":
                sendMessage(chatId, "infoFIXME", true);
                break;
                
            default:
                sendMessage(chatId, "defaultFIXME", true);
                break;
        }
    }

    private void sendMessage(long chatId, String text) {
        sendMessage(chatId, text, false);
    }
    
    private void sendMessage(long chatId, String text, boolean markdown) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        
        if (markdown) {
            message.setParseMode("Markdown");
        }

        try {
            execute(message);
            log.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {}: {}", chatId, text.substring(0, Math.min(50, text.length())));
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {}", e.getMessage());
        }
    }
}
